# workflow 이름
name: MovieToGather-Integration

# workflow 실행 조건
on:
  #  workflow_dispatch:
  pull_request:
    branches: [main, dev]

# workflow 가 저장소의 contents, PR 을 읽을 수 있도록
permissions:
  contents: read
  pull-requests: read


# 실행할 작업들
jobs:
  integration:

    # 가상환경 운영체제OS 선택
    runs-on: ubuntu-latest

    steps:

      # PR 에 해당하는 레포지토리로 checkout
      - name: Checkout
        uses: actions/checkout@v2

      - name: application-test.yml 디렉토리 생성
        run: mkdir -p ./src/test/resources

      - name: application-test.yml 파일 생성
        run: touch ./src/test/resources/application-test.yml

      - name: application.yml 설정 추가
        run: |
          cat << EOF > ./src/test/resources/application-test.yml
          api:
            key: "${{ secrets.API_TMDB_KEY }}"
            popularUrl: "${{ secrets.API_TMDB_POPULAR_URL }}"
            genreUrl: "${{ secrets.API_TMDB_GENRE_URL }}"
          auth:
            jwt:
              issuer: "${{ secrets.AUTH_JWT_ISSUER }}"
              secret: "${{ secrets.AUTH_JWT_SECRET }}"
              accessTokenExpirationHour: "${{ secrets.AUTH_JWT_ACCESSTOKENEXPIRATIONHOUR }}"
          spring:
            security:
             oauth2:
                client:
                  registration:
                    google:
                      client-id: "${{ secrets.AUTH_GOOGLE_ID }}"
                      client-secret: "${{ secrets.AUTH_GOOGLE_SECRET }}"
                      scope:
                         - email
                         - profile          
          EOF

      # java JDK 설치
      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # Gradle 실행 권한 부여
      - name: Gradle 권한 부여
        run: chmod +x gradlew

      # 빌드, 테스트
      - name: 테스트
        run: ./gradlew test

      - name: Gradle 빌드
        run: ./gradlew build -x test
