api:
  key: ${API_KEY}
  popularUrl: ${API_POPULAR_URL}
  genreUrl: ${API_GENRE_URL}
  searchUrl: ${API_SEARCH_URL}

auth:
  jwt:
    issuer: ${AUTH_JWT_ISSUER}
    secret: ${AUTH_JWT_SECRET}
    accessTokenExpirationHour: ${AUTH_JWT_ACCESSTOKENEXPIRATIONHOUR}

spring:
  datasource:
    driver-class-name: ${H2_DRIVER_CLASS_NAME}
    url: ${H2_URL}
    username: ${H2_USERNAME}
    password:
  sql:
    init:
      mode: embedded
  h2:
    console:
      enabled: true
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${AUTH_GOOGLE_ID}
            client-secret: ${AUTH_GOOGLE_SECRET}
            scope:
              - email
              - profile
  jpa:
    generate-ddl: 'true'
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        #  show_sql: true
        format_sql: true
        use_sql_comments: true # sql 과 함께 jpql 주석처리되어  콘솔창에 출력
#        dialect: org.hibernate.dialect.PostgreSQLDialect

logging:
  level:
    org:
      hibernate:
        SQL: debug
        orm:
          jdbc:
            bind: trace
    springframework:
      security: debug
# Actuator
management:
  info:
    java:
      enabled: true
    os:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
server:
  tomcat:
    mbeanregistry:
      enabled: true
